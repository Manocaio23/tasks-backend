pipeline {
    agent any
    stages {
        stage('Build Backend') {
            steps {
                bat 'mvn clean package -DskipTests=true'
            }
        }
        stage('Unit Tests') {
            steps {
                bat 'mvn test'
            }
        }
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'SONAR_SCANNER'
            }
            steps {
                withSonarQubeEnv('SONAR_LOCAL') {
                    bat "${scannerHome}/bin/sonar-scanner -e -Dsonar.projectKey=DeployBack -Dsonar.host.url=http://localhost:9000 -Dsonar.login=4355f47c2562e1d8c610366e976ab62785d8d9b8 -Dsonar.java.binaries=target"
                }
            }
        }
        stage('Deploy Backend') {
            steps {
                deploy adapters: [tomcat8(credentialsId: 'TomcatLofin', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks-backend', war: 'target/tasks-backend.war'
            }
        }
         stage('API Test') {
            steps {
                dir('api-test') {
                        git 'https://github.com/Manocaio23/tasks-api-test.git'
                         bat 'mvn test'
                        }
            }
        }
         stage('Deploy Frontend') {
            steps {
                dir('frontend') {
                        git 'https://github.com/Manocaio23/tasks-frontend.git'
                        bat 'mvn clean package'
                        deploy adapters: [tomcat8(credentialsId: 'TomcatLofin', path: '', url: 'http://localhost:8001/')], contextPath: 'tasks', war: 'target/tasks.war'
                        }
                       
            }
        }

         stage('Functional Test') {
            steps {
                dir('Functional-test') {
                        git 'https://github.com/Manocaio23/tasks-functional-tests.git'
                         bat 'mvn test'
                        }
            }
        }

        
         stage('Deploy em produção') {
            steps {
                bat 'docker-compose build'
                bat 'docker-compose up -d'
            }

    }

     stage('Health Check') {
            steps {
                sleep(5)
                dir('Functional-test') {
                         bat 'mvn verify -Dit.test=br.ce.wcaquino.tasks.prod.HealthCheckIt'
                        }
            }
        }
}

    }


